// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelgeneration (interfaces: Generation)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockGeneration is a mock of Generation interface
type MockGeneration struct {
	ctrl     *gomock.Controller
	recorder *MockGenerationMockRecorder
}

// MockGenerationMockRecorder is the mock recorder for MockGeneration
type MockGenerationMockRecorder struct {
	mock *MockGeneration
}

// NewMockGeneration creates a new mock instance
func NewMockGeneration(ctrl *gomock.Controller) *MockGeneration {
	mock := &MockGeneration{ctrl: ctrl}
	mock.recorder = &MockGenerationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGeneration) EXPECT() *MockGenerationMockRecorder {
	return m.recorder
}

// AssignAllUnits mocks base method
func (m *MockGeneration) AssignAllUnits(arg0 string) error {
	ret := m.ctrl.Call(m, "AssignAllUnits", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignAllUnits indicates an expected call of AssignAllUnits
func (mr *MockGenerationMockRecorder) AssignAllUnits(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignAllUnits", reflect.TypeOf((*MockGeneration)(nil).AssignAllUnits), arg0)
}

// AssignUnit mocks base method
func (m *MockGeneration) AssignUnit(arg0 string) error {
	ret := m.ctrl.Call(m, "AssignUnit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignUnit indicates an expected call of AssignUnit
func (mr *MockGenerationMockRecorder) AssignUnit(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignUnit", reflect.TypeOf((*MockGeneration)(nil).AssignUnit), arg0)
}

// AutoComplete mocks base method
func (m *MockGeneration) AutoComplete() error {
	ret := m.ctrl.Call(m, "AutoComplete")
	ret0, _ := ret[0].(error)
	return ret0
}

// AutoComplete indicates an expected call of AutoComplete
func (mr *MockGenerationMockRecorder) AutoComplete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AutoComplete", reflect.TypeOf((*MockGeneration)(nil).AutoComplete))
}

// CanAutoComplete mocks base method
func (m *MockGeneration) CanAutoComplete() (bool, error) {
	ret := m.ctrl.Call(m, "CanAutoComplete")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CanAutoComplete indicates an expected call of CanAutoComplete
func (mr *MockGenerationMockRecorder) CanAutoComplete() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanAutoComplete", reflect.TypeOf((*MockGeneration)(nil).CanAutoComplete))
}

// CanMakeCurrent mocks base method
func (m *MockGeneration) CanMakeCurrent() (bool, []string, error) {
	ret := m.ctrl.Call(m, "CanMakeCurrent")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CanMakeCurrent indicates an expected call of CanMakeCurrent
func (mr *MockGenerationMockRecorder) CanMakeCurrent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CanMakeCurrent", reflect.TypeOf((*MockGeneration)(nil).CanMakeCurrent))
}

// MakeCurrent mocks base method
func (m *MockGeneration) MakeCurrent() error {
	ret := m.ctrl.Call(m, "MakeCurrent")
	ret0, _ := ret[0].(error)
	return ret0
}

// MakeCurrent indicates an expected call of MakeCurrent
func (mr *MockGenerationMockRecorder) MakeCurrent() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeCurrent", reflect.TypeOf((*MockGeneration)(nil).MakeCurrent))
}

// Refresh mocks base method
func (m *MockGeneration) Refresh() error {
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh
func (mr *MockGenerationMockRecorder) Refresh() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockGeneration)(nil).Refresh))
}
