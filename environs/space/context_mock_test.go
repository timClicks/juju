// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/environs/context (interfaces: ProviderCallContext)

// Package space is a generated GoMock package.
package space

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockProviderCallContext is a mock of ProviderCallContext interface
type MockProviderCallContext struct {
	ctrl     *gomock.Controller
	recorder *MockProviderCallContextMockRecorder
}

// MockProviderCallContextMockRecorder is the mock recorder for MockProviderCallContext
type MockProviderCallContextMockRecorder struct {
	mock *MockProviderCallContext
}

// NewMockProviderCallContext creates a new mock instance
func NewMockProviderCallContext(ctrl *gomock.Controller) *MockProviderCallContext {
	mock := &MockProviderCallContext{ctrl: ctrl}
	mock.recorder = &MockProviderCallContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockProviderCallContext) EXPECT() *MockProviderCallContextMockRecorder {
	return m.recorder
}

// Dying mocks base method
func (m *MockProviderCallContext) Dying() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dying")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Dying indicates an expected call of Dying
func (mr *MockProviderCallContextMockRecorder) Dying() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dying", reflect.TypeOf((*MockProviderCallContext)(nil).Dying))
}

// InvalidateCredential mocks base method
func (m *MockProviderCallContext) InvalidateCredential(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateCredential", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateCredential indicates an expected call of InvalidateCredential
func (mr *MockProviderCallContextMockRecorder) InvalidateCredential(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateCredential", reflect.TypeOf((*MockProviderCallContext)(nil).InvalidateCredential), arg0)
}
