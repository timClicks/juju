// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/environs/space (interfaces: ReloadSpacesState)

// Package space is a generated GoMock package.
package space

import (
	gomock "github.com/golang/mock/gomock"
	network "github.com/juju/juju/core/network"
	reflect "reflect"
)

// MockReloadSpacesState is a mock of ReloadSpacesState interface
type MockReloadSpacesState struct {
	ctrl     *gomock.Controller
	recorder *MockReloadSpacesStateMockRecorder
}

// MockReloadSpacesStateMockRecorder is the mock recorder for MockReloadSpacesState
type MockReloadSpacesStateMockRecorder struct {
	mock *MockReloadSpacesState
}

// NewMockReloadSpacesState creates a new mock instance
func NewMockReloadSpacesState(ctrl *gomock.Controller) *MockReloadSpacesState {
	mock := &MockReloadSpacesState{ctrl: ctrl}
	mock.recorder = &MockReloadSpacesStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReloadSpacesState) EXPECT() *MockReloadSpacesStateMockRecorder {
	return m.recorder
}

// SaveProviderSpaces mocks base method
func (m *MockReloadSpacesState) SaveProviderSpaces(arg0 []network.SpaceInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProviderSpaces", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProviderSpaces indicates an expected call of SaveProviderSpaces
func (mr *MockReloadSpacesStateMockRecorder) SaveProviderSpaces(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProviderSpaces", reflect.TypeOf((*MockReloadSpacesState)(nil).SaveProviderSpaces), arg0)
}

// SaveProviderSubnets mocks base method
func (m *MockReloadSpacesState) SaveProviderSubnets(arg0 []network.SubnetInfo, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveProviderSubnets", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveProviderSubnets indicates an expected call of SaveProviderSubnets
func (mr *MockReloadSpacesStateMockRecorder) SaveProviderSubnets(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveProviderSubnets", reflect.TypeOf((*MockReloadSpacesState)(nil).SaveProviderSubnets), arg0, arg1)
}
