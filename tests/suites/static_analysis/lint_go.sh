run_go_vet() {
  PACKAGES="${2}"
  # shellcheck disable=SC2086
  OUT=$(go vet -composites=false ${PACKAGES} 2>&1 || true)
  if [ -n "${OUT}" ]; then
    echo ""
    echo "$(red 'Found some issues:')"
    echo "\\n${OUT}" >&2
    exit 1
  fi
}

run_go_lint() {
  PACKAGES="${2}"
  # shellcheck disable=SC2086
  OUT=$(golint -set_exit_status ${PACKAGES} 2>&1 || true)
  if [ -n "${OUT}" ]; then
    echo ""
    echo "$(red 'Found some issues:')"
    echo "\\n${OUT}" >&2
    exit 1
  fi
}

run_go_imports() {
  FOLDERS="${2}"
  OUT=$(echo "${FOLDERS}" | xargs -I % goimports -l % 2>&1 || true)
  LIST=$(echo "${OUT}" | grep -v "mocks\/" | grep -v "mock_" | grep -v "_mock.go" | grep -v "_mock_test.go" | xargs grep -L "MACHINE GENERATED BY" || true)
  GOFILES=$(echo "${LIST}" | xargs head -q -n1 | grep -v "Code generated by" | tr -d '\n')
  if [ -n "${GOFILES}" ]; then
    GOFILES=$(echo "${OUT}" | xargs -I% grep -L "Code generated by" % | sort -u || true)
    echo ""
    echo "$(red 'Found some issues:')"
    echo "\\n${GOFILES}" >&2
    exit 1
  fi
}

run_deadcode() {
  FOLDERS="${2}"
  # shellcheck disable=SC2086
  OUT=$(deadcode ${FOLDERS} 2>&1 || true)
  if [ -n "${OUT}" ]; then
    echo ""
    echo "$(red 'Found some issues:')"
    echo "\\n${OUT}" >&2
    exit 1
  fi
}

run_misspell() {
  FILES="${2}"
  # shellcheck disable=SC2086
  OUT=$(misspell -source=go 2>/dev/null ${FILES} || true)
  if [ -n "${OUT}" ]; then
    echo ""
    echo "$(red 'Found some issues:')"
    echo "${OUT}"
    exit 1
  fi
}

run_unconvert() {
  PACKAGES="${2}"
  # shellcheck disable=SC2086
  OUT=$(unconvert ${PACKAGES} 2>&1 || true)
  if [ -n "${OUT}" ]; then
    echo ""
    echo "$(red 'Found some issues:')"
    echo "\\n${OUT}" >&2
    exit 1
  fi
}

run_ineffassign() {
  FOLDERS="${2}"
  # shellcheck disable=SC2086
  OUT=$(ineffassign ${FOLDERS} | grep -v "_test.go" | grep "github.com/juju/juju" | sed -E "s/^(.+src\\/github\\.com\\/juju\\/juju\\/)(.+)/\2/")
  if [ -n "${OUT}" ]; then
    echo ""
    echo "$(red 'Found some issues:')"
    echo "${OUT}"
    exit 1
  fi
}

run_go_fmt() {
  FILES=${2}
  OUT=$(echo "${FILES}" | xargs gofmt -l -s)
  if [ -n "${OUT}" ]; then
    OUT=$(echo "${OUT}" | sed "s/^/  /")
    echo ""
    echo "$(red 'Found some issues:')"
    for ITEM in ${OUT}; do
      echo "gofmt -s -w ${ITEM}"
    done
    exit 1
  fi
}

test_static_analysis_go() {
  if [ "$(skip 'test_static_analysis_go')" ]; then
      echo "==> TEST SKIPPED: static go analysis"
      return
  fi

  (
    set_verbosity

    cd .. || exit

    FILES=$(find ./* -name '*.go' -not -name '.#*' -not -name '*_mock.go' | grep -v vendor/ | grep -v acceptancetests/)
    FOLDERS=$(echo "${FILES}" | sed s/^\.//g | xargs dirname | awk -F "/" '{print $2}' | uniq | sort)
    PACKAGES=$(go list ./... | grep -v github.com/juju/juju\$ | grep -v github.com/juju/juju/vendor/ | grep -v github.com/juju/juju/acceptancetests/)

    ## Functions starting by empty line
    # turned off until we get approval of test suite
    # run "func vet"

    ## go vet, if it exists
    if go help vet >/dev/null 2>&1; then
      run "run_go_vet" "${PACKAGES}"
    else
      echo "vet not found, vet static analysis disabled"
    fi

    # TODO(hpidcock): re-enable golint when all the errors are fixed.

    ## golint
    #if which golint >/dev/null 2>&1; then
    #  run "run_go_lint" "${PACKAGES}"
    #else
    #  echo "golint not found, golint static analysis disabled"
    #fi

    ## goimports
    if which goimports >/dev/null 2>&1; then
      run "run_go_imports" "${FOLDERS}"
    else
      echo "goimports not found, goimports static analysis disabled"
    fi

    # TODO(hpidcock): re-enable deadcode when it supports tests/
    # fix deadcode errors.

    ## deadcode
    #if which deadcode >/dev/null 2>&1; then
    #  run "run_deadcode" "${FOLDERS}"
    #else
    #  echo "deadcode not found, deadcode static analysis disabled"
    #fi

    ## misspell
    if which misspell >/dev/null 2>&1; then
      run "run_misspell" "${FILES}"
    else
      echo "misspell not found, misspell static analysis disabled"
    fi

    ## unconvert
    if which unconvert >/dev/null 2>&1; then
      run "run_unconvert" "${PACKAGES}"
    else
      echo "unconvert not found, unconvert static analysis disabled"
    fi

    ## ineffassign
    if which ineffassign >/dev/null 2>&1; then
      run "run_ineffassign" "${FOLDERS}"
    else
      echo "ineffassign not found, ineffassign static analysis disabled"
    fi

    ## go fmt
    run "run_go_fmt" "${FILES}"
  )
}
